name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      docker_repository:
        required: true
        type: string
      eb_application_name:
        required: true
        type: string
      eb_environment_name:
        required: true
        type: string
      eb_version_label_suffix:
        required: true
        type: string
      container_port:
        required: false
        type: number
        default: 8000
      host_port:
        required: false
        type: number
        default: 80

jobs:
  deploy:
    name: Deploy app ${{ inputs.app_name }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag, and Push Docker Image
      id: build-and-push
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ inputs.docker_repository }}
        IMAGE_TAG: ${{ github.sha }}
        IMAGE_TAG_LATEST: latest
      run: |
        # Build the Docker image
        docker build --build-arg TARGET_APP=${{ inputs.app_name }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

        # Tag the image with latest
        docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG_LATEST

        # Push both tags to the repository
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG_LATEST

        # Output variables for next steps
        echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
        echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create Dockerrun.aws.json
      run: |
        REGISTRY="${{ steps.build-and-push.outputs.registry }}"
        REPOSITORY="${{ steps.build-and-push.outputs.repository }}"
        IMAGE_TAG="${{ steps.build-and-push.outputs.image_tag }}"
        IMAGE_URI="$REGISTRY/$REPOSITORY:$IMAGE_TAG"

        echo "Generated IMAGE_URI: $IMAGE_URI" # For debugging

        cat > Dockerrun.aws.json << EOF
        {
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "$IMAGE_URI",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": "${{ inputs.container_port }}",
              "HostPort": "${{ inputs.host_port }}"
            }
          ]
        }
        EOF

    - name: Cat Dockerrun.aws.json
      run: |
        cat Dockerrun.aws.json

    - name: Zip Dockerrun.aws.json
      run: |
        zip deployment_package.zip Dockerrun.aws.json

    - name: Deploy to AWS Elastic Beanstalk
      if: github.event_name == 'push'
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ inputs.eb_application_name }}
        environment_name: ${{ inputs.eb_environment_name }}
        version_label: ${{ steps.build-and-push.outputs.image_tag }}-${{ inputs.eb_version_label_suffix }}
        region: eu-central-1
        deployment_package: deployment_package.zip
